package rc5

import (
	"bytes"
	"testing"
)

var tests = []struct {
	key    []byte
	plain  []byte
	cipher []byte
}{
	// https://www.cosic.esat.kuleuven.be/nessie/testvectors/bc/rc5/Rc5-128-64.verified.test-vectors
	{
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77},
		[]byte{0x2D, 0xDC, 0x14, 0x9B, 0xCF, 0x08, 0x8B, 0x9E},
	},
	{
		[]byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48},
		[]byte{0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84},
		[]byte{0x11, 0xE4, 0x3B, 0x86, 0xD2, 0x31, 0xEA, 0x64},
	},
	{
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		[]byte{0x96, 0x95, 0x0D, 0xDA, 0x65, 0x4A, 0x3D, 0x62},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77},
	},
	{
		[]byte{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48},
		[]byte{0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66, 0x3F},
		[]byte{0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84},
	},
}

func TestRC5(t *testing.T) {

	for _, tst := range tests {

		c, _ := New(tst.key)

		var ct [8]byte

		c.Encrypt(ct[:], tst.plain[:])

		if !bytes.Equal(ct[:], tst.cipher) {
			t.Errorf("encrypt failed:\ngot : % 02x\nwant: % 02x", ct[:], tst.cipher)
		}

		var p [8]byte

		c.Decrypt(p[:], ct[:])

		if !bytes.Equal(p[:], tst.plain) {
			t.Errorf("decrypt failed:\ngot : % 02x\nwant: % 02x", p[:], tst.plain)
		}
	}
}
